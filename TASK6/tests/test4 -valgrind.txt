Тест на валгринд, + добавлена отладочная информация для визуализации процесса выделения памяти.
Зато убрал из цикла принудительное перераспределение памяти при распечатке меню 
(так как логически это не верно, и в целом нужно было для демонстрации общности написанных процедур),
но добавил в функцию  
DinamicAddElement(unsigned int number,unsigned short int addition,char inicializate) \
параметр inicializate явно указывающий что это "первый" запуск функции веделения памяти и нужна ячейка под парсинг,
соответственно при полном освобождении памяти  DinamicAddElement(1, addition, 1) ; вызывается повторно.

если бы этого не сделал, программа осталась бы корректной, но выделяла бы память под первого абонента, хотя самого абонента еще введено не было, что не так красиво, плюс лишний вызов в главном цикле

Тест показал корректное высвобождение памяти:
(добавили абонента - удалили - вновь добавили и вышли)

==18131== 
==18131== HEAP SUMMARY:
==18131==     in use at exit: 0 bytes in 0 blocks
==18131==   total heap usage: 7 allocs, 7 frees, 2,229 bytes allocated
==18131== 
==18131== All heap blocks were freed -- no leaks are possible

====================================
(*)Остались, ошибки на неопределенные переменные , хотя в коде их нет,
и все работает корректно, может быть вы ответите почему?
Мое предположение на функции printf, ABOOK глобальная переменная указатель STR_LENGTH директива  

void PrintItem(int item)            // функция печати структуры
{if ((item>=0)&&(item<=MAX))
 {int i=0; 
 printf("#%2d Имя: ",item+1);
 for(i=0;i<STR_LENGTH;i++) if(ABOOK[item].name[i]){printf("%c",ABOOK[item].name[i]);}else{printf(" ");};
printf(" Фамилия: ");
for(i=0;i<STR_LENGTH;i++) if(ABOOK[item].second_name[i]){printf("%c",ABOOK[item].second_name[i]);}else{printf(" ");};
printf(" Телефон: ");
for(i=0;i<STR_LENGTH;i++) if(ABOOK[item].tel[i]){printf("%c",ABOOK[item].tel[i]);}else{printf(" ");};
printf("\n");
 } else {printf("index error\n");};
  
}



========================


wh@wh-VirtualBox:~/Eltex/d6/d6-2$ valgrind --leak-check=full -s ./d6ex1
==18131== Memcheck, a memory error detector
==18131== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==18131== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==18131== Command: ./d6ex1
==18131== 

1) Добавить абонента
2) Удалить абонента
3) Поиск абонентов по имени
4) Вывод всех записей
5) Выход
Ваш выбор (1-5):
1
Введите информацию об абоненте (имя фамилия телефон):
Используйте только английские буквы(что бы уложиться в байт) 10 символов на поле:
sadam ufa cat
Добавлена запись:
# 1 Имя: sadam      Фамилия: ufa        Телефон: cat       
Запись корректна? (y/n):
y

1) Добавить абонента
2) Удалить абонента
3) Поиск абонентов по имени
4) Вывод всех записей
5) Выход
Ваш выбор (1-5):
2
Для удаления найдите абонента, пример: * Savina *
Введите имя фамилию или номер телефона абонента для поиска:
формат(Английская раскладка): Имя/* Фамилия/* телефон/* 
* * c
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A0C5: FindAbonent (parsing.c:81)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A0F0: FindAbonent (parsing.c:82)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
ищем совпадения по фильтру, определено 1 поле для поиска:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x109447: PrintItem (d6ex1.c:64)
==18131==    by 0x10A1D8: FindAbonent (parsing.c:94)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x1094D7: PrintItem (d6ex1.c:66)
==18131==    by 0x10A1D8: FindAbonent (parsing.c:94)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x109568: PrintItem (d6ex1.c:68)
==18131==    by 0x10A1D8: FindAbonent (parsing.c:94)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
# 2 Имя:            Фамилия:            Телефон: c         
================================================
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A214: FindAbonent (parsing.c:99)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A2E7: FindAbonent (parsing.c:105)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A628: FindSTR (parsing.c:143)
==18131==    by 0x10A427: FindAbonent (parsing.c:112)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
найдено 1 записей по фильтру:
================================================
# 1 Имя: sadam      Фамилия: ufa        Телефон: cat       
Введите номер записи для удаления (от 1 до 1):
1
Будет удалена запись
# 1 Имя: sadam      Фамилия: ufa        Телефон: cat       
Удалить (y/n):
y
MAX=1 x=1 number=1
(MAX=0 x=1 number=1)

1) Добавить абонента
2) Удалить абонента
3) Поиск абонентов по имени
4) Вывод всех записей
5) Выход
Ваш выбор (1-5):
4
Нет записей в справочнике

1) Добавить абонента
2) Удалить абонента
3) Поиск абонентов по имени
4) Вывод всех записей
5) Выход
Ваш выбор (1-5):
1
Введите информацию об абоненте (имя фамилия телефон):
Используйте только английские буквы(что бы уложиться в байт) 10 символов на поле:
lana igorevna 6790145
Добавлена запись:
# 1 Имя: lana       Фамилия: igorevna   Телефон: 6790145   
Запись корректна? (y/n):
y

1) Добавить абонента
2) Удалить абонента
3) Поиск абонентов по имени
4) Вывод всех записей
5) Выход
Ваш выбор (1-5):
5
==18131== 
==18131== HEAP SUMMARY:
==18131==     in use at exit: 0 bytes in 0 blocks
==18131==   total heap usage: 7 allocs, 7 frees, 2,229 bytes allocated
==18131== 
==18131== All heap blocks were freed -- no leaks are possible
==18131== 
==18131== Use --track-origins=yes to see where uninitialised values come from
==18131== ERROR SUMMARY: 34 errors from 8 contexts (suppressed: 0 from 0)
==18131== 
==18131== 1 errors in context 1 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A628: FindSTR (parsing.c:143)
==18131==    by 0x10A427: FindAbonent (parsing.c:112)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== 
==18131== 1 errors in context 2 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A2E7: FindAbonent (parsing.c:105)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== 
==18131== 1 errors in context 3 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A214: FindAbonent (parsing.c:99)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== 
==18131== 1 errors in context 4 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A0F0: FindAbonent (parsing.c:82)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== 
==18131== 1 errors in context 5 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x10A0C5: FindAbonent (parsing.c:81)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== 
==18131== 9 errors in context 6 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x109568: PrintItem (d6ex1.c:68)
==18131==    by 0x10A1D8: FindAbonent (parsing.c:94)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== 
==18131== 10 errors in context 7 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x1094D7: PrintItem (d6ex1.c:66)
==18131==    by 0x10A1D8: FindAbonent (parsing.c:94)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== 
==18131== 10 errors in context 8 of 8:
==18131== Conditional jump or move depends on uninitialised value(s)
==18131==    at 0x109447: PrintItem (d6ex1.c:64)
==18131==    by 0x10A1D8: FindAbonent (parsing.c:94)
==18131==    by 0x10998E: DeleteItem (d6ex1.c:147)
==18131==    by 0x109322: main (d6ex1.c:46)
==18131== 
==18131== ERROR SUMMARY: 34 errors from 8 contexts (suppressed: 0 from 0)
wh@wh-VirtualBox:~/Eltex/d6/d6-2$ 
























