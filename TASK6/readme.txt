Задание 6 - Динамические массивы, а в моем случае + модульность и сторонние инструменты отладки

1. Абонентский справочник выполнен в модулях с раздельной компиляцией, максимально близко к логике Клиент-Сервер
2. играем в игру:  
программа написана не нами, нужны минимальные изменения в "чужом "коде, с наследованием архитектурного решения.

Реализован модуль  dinamic.c ,наследованные define ушли в глобальные переменные, задача модуля подстраивать их значения так, 
что бы они не нарушали наследованную логику работы.
В связи с этим напрашивается не большое усложнение, что и было реализованно - в общем случае динамический массив выделяет "страницу" памяти или что то аналогичное буферезации и кешированию. Мало ли что нам придет в голову в дальнейшем, например хранить данные на другом носителе и обрабатывать по блочно. 
Теперь MAX берет на себя роль размера этого блока.
count - по прежнему реальное кол-во абонентов

Так же мы по прежнему наследуем логику - харанить в последнем элементе массива строчку под парсинг строки, т.е. имеем модуль парсинга задача которого заполнять этот последний элемент массива нужным образом.

Тестирование - в папке тест имеем результаты нескольких тестов
1. Тестирование на поведение программы при граничных условиях ( 0 абонентов)
2. Тестирование постраничного выделения памяти (общий случай), тестирование парсинга
3. Тестирование частного случая, как и было задано ( частный случай)
4. Тест на утечки с помошью valgrind   (*) утечек нет но есть вещи которые не нравятся валгринду и не совсем понятно что именно ему не нравится, хотел бы получить обратную связь


Другие улучшения по ходу:
1. в фильтрации реализована логика "И" т.е. при фильтре: Deru A
Найдет именно Deruga Alexandr Urjevich , a Dergunov Alexey 89137063221 не найдет 
2. В парсинге теперь контролируем строки с большим числом параметров, ранее логика была такая - разобрали первое что корректно можно было трактовать, далее читаем как бы по циклу, сейчас просто отбрасываем все что лишнее

3. Телефон по прежнему разрешаю  писать с буквами, удобно для тестирования бывает 
