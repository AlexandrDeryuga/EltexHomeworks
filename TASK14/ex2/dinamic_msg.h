/*
модуль ведет поток сообщений - выделяет память под строки, и хранит строки подряд,
запоминать индекс/"указатель" на строку - дело клиента модуля, на каждое записываемое сообщение 
функция будет возвращать этот индекс.
*/

#ifndef DINAMIC_MSG_H
#define DINAMIC_MSG_H

#include <malloc.h>
#include <string.h>

#define MAX_ROOMMSG 1000

typedef struct RoomFileType
{
char * ptr;               // указатель на память
char Name[15];            // имя комнаты, оно же имя абонента
unsigned long id;         // он же pid клиента
unsigned long to_id;      //Кому pid


//int send_from;  // начиная с какого индекса рассылать сообщения из этой комнаты (типа новые сообщения), упростил пусть по одному
char sending;    //- если 1, значит сообщение еще не ушло в очередь. - основной процесс устанавливает этот флаг, 
                //и дожидается его снятия, поток обработки  сообщений снимает

int msg_counter;     // кол-во сообщений в комнате
int pages;          // системное - сколько страниц буферной памяти выделено, размер буфера в дефайне 
//int last_print;    // показывает какие сообщения были распечатаны
int private_chat;   // если это поле больше нуля, то чат скрыт в общем списке для остальных клиентов, кроме того кому он предназначен

unsigned long Messages[MAX_ROOMMSG]; // массив индексов - указателей на сообщение;

unsigned long max;// доступно байтов в выделенной памяти
unsigned long next_msg; //  указывает куда будем размещать след.строку
} RoomFileType;

#define PAGE_SIZE 100 

int  AddNewMessage (RoomFileType *RoomMSG, char * str, int construct, char * Name, int privat);  //вернет индекс строки. если constructor - то выделить память и выйти  
                                                                                                //-1 - деструктор, приват для p2p комнат типа Клиент-[..server..]-Клиент
//void delMessages();

#endif
