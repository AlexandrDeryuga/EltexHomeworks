Домашнее задание на много поточный цикл
тестировалось три варианта программы
1. Вариант с промежуточным выводом на экран - когда поток диспетчером будет вытеснен
2. Вариант с Pthread_mutex_lock()
3. вариант с распаралеливанием вычислений, когда каждая нить берет на себя только свою долю вычислений, 
   и так же оценка коллизий при высоком приоритете нитей.

Рабочее тело цикла выглядит так :

 while (x->a< ...) 
       {
        pthread_mutex_lock( &mutex ); 
       (x->a)++;b++;
       pthread_mutex_unlock( &mutex );
       // printf("поток %lu> b=%d раз\n", id, b);
        };

РЕЗУЛЬТАТЫ:

Иллюстрация коллизии переменных, сумма тактов всех циклов не равна кол-ву операций
(Запуск цикла в потоке)
==================================
поток 128839> b=1794125 раз
поток 128839> b=1794126 раз
поток 128839> b=1794127 раз
поток 128839> b=1794128 раз
поток 128839> b=1794129 раз
поток 128839> b=1794130 раз
поток 128839> b=1794131 раз
поток 128839> b=1794132 раз
поток 128839> b=1794133 раз
поток 128839> b=1794134 раз
поток 128839> b=1794135 раз
поток 128839> b=1794136 раз
поток 128839> b=1794137 раз
поток 128839> b=1794138 раз
поток 128839> цикл выполнилcя b=1794138 раз
поток 128842> b=1798398 раз
поток 128842> цикл выполнилcя b=1798398 раз
поток 128843> b=1804676 раз
поток 128843> цикл выполнилcя b=1804676 раз
поток 128840> b=1776396 раз
поток 128840> цикл выполнилcя b=1776396 раз
поток 128841> цикл выполнилcя b=1826868 раз
Все 5 нитей завершились, a=9000000  sumb=9000476
wh@wh-VirtualBox:~/Git/EltexHomeworks/TASK11$ 


запуск с Pthread_mutex_lock()
====================================
wh@wh-VirtualBox:~/Git/EltexHomeworks/TASK11$ ./d11ex2
Главная thread id (gettid) 137300 - создаю потоки!
поток 137301> цикл выполнилcя b=17908740 раз
поток 137302> цикл выполнилcя b=17980057 раз
поток 137305> цикл выполнилcя b=18134180 раз
поток 137304> цикл выполнилcя b=18029599 раз
поток 137303> цикл выполнилcя b=17947426 раз
Все 5 нитей завершились, a=90000002  sumb=90000002 , время работы: 1.081145  сек.


А теперь распаралеливание цикла, каждый поток считает 1/5 от всей задачи, 
  // pthread_mutex_lock( &mutex ); 
       (x->a)++;b++;                          // оставим вычислительную нагрузку ту же
  //pthread_mutex_unlock( &mutex );
=====================================================
Главная thread id (gettid) 137939 - создаю потоки!
поток 137943> цикл выполнилcя b=18000000 раз
поток 137942> цикл выполнилcя b=18000000 раз
поток 137940> цикл выполнилcя b=18000000 раз
поток 137941> цикл выполнилcя b=18000000 раз
поток 137944> цикл выполнилcя b=18000000 раз
Все 5 нитей завершились, a=26190038  sumb=90000000 , время работы: 0.040247  сек.

===
Вывод:
Время сократилось почти на  треть, основная часть рабочего времени прошла в коллизиях
   a=26 190 038  
sumb=90 000 000

