1. скачали  openssh 
https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/

2. читаем описание, нужна zlib, качаем
https://zlib.net/

3. Установка zlib
3.1  Чистим для общего случая.
>root@wh-VirtualBox:/usr/src/proshivka/zlib-1.3.1# make distclean

3.2 вспоминаем
>root@wh-VirtualBox:/usr/src/proshivka/zlib-1.3.1# ./configure --help

3.3 конфигурируем
root@wh-VirtualBox:/usr/src/proshivka/zlib-1.3.1# CC=arm-linux-gnueabihf-gcc ./configure --static --prefix=$PWD/_install
Building static library libz.a version 1.3.1 with arm-linux-gnueabihf-gcc.
root@wh-VirtualBox:/usr/src/proshivka/zlib-1.3.1# CC=arm-linux-gnueabihf-gcc ./configure --static --prefix=$PWD/_install
Building static library libz.a version 1.3.1 with arm-linux-gnueabihf-gcc.
...
3.4 компилируем
root@wh-VirtualBox:/usr/src/proshivka/zlib-1.3.1# make -j 16

3.5  инсталлируем, что бы результат появился в папке
root@wh-VirtualBox:/usr/src/proshivka/zlib-1.3.1# make install

4. смотрим зависимости, что это?
root@wh-VirtualBox:/usr/src/proshivka# ldd ./openssh-9.8p1
ldd: ./openssh-9.8p1: не обычный файл
4.1 из лекции знаем что нужна openssl, качаем
ttps://openssl-library.org/source/index.html

4.2 Прикол
./Configure --help
Configuring OpenSSL version 3.3.2 for target linux-x86_64
Using os-specific seed configuration
Created configdata.pm
Running configdata.pm
Created Makefile.in
Created Makefile
Created include/openssl/configuration.h

**********************************************************************
***                                                                ***
***   OpenSSL has been successfully configured                     ***
***                                                                ***
***   If you encounter a problem while building, please open an    ***
***   issue on GitHub <https://github.com/openssl/openssl/issues>  ***
***   and include the output from the following command:           ***
***                                                                ***
***       perl configdata.pm --dump                                ***
***                                                                ***
***   (If you are new to OpenSSL, you might want to consult the    ***
***   'Troubleshooting' section in the INSTALL.md file first)      ***
***                                                                ***
**********************************************************************
root@wh-VirtualBox:/usr/src/proshivka/openssl-3.3.2# 

4.3
>root@wh-VirtualBox:/usr/src/proshivka/openssl-3.3.2# ./Configure distclean
Configuring OpenSSL version 3.3.2 for target distclean
Using os-specific seed configuration
Usage: Configure [no-<feature> ...] [enable-<feature> ...] [-Dxxx] [-lxxx] [-Lxxx] [-fxxx] [-Kxxx] [no-hw-xxx|no-hw] [[no-]threads] [[no-]thread-pool] [[no-]default-thread-pool] [[no-]shared] [[no-]zlib|zlib-dynamic] [no-asm] [no-egd] [sctp] [386] [--prefix=DIR] [--openssldir=OPENSSLDIR] [--with-xxx[=vvv]] [--config=FILE] os/compiler[:flags]
...
>make distclean


4.4    Проверка на опцию из хелпа не сработала 
gcc -dM -E <dev/null | grep __SIZEOF_INT128__
bash: dev/null: Нет такого файла или каталога

4.5 
./Configure LIST
нашего компилятора в списке компиляторов нет !!!!  и что делать???

, в сети есть ссылки (не достоверные) что можно 
поробовать linux-generic32

https://wiki.openssl.org/index.php/Compilation_and_Installation - описание опций
https://documentation.unified-automation.com/uasdkcpp/1.5.4/html/OpenSSLXCompile.html - отсюда узнаем про crosscompile prefix!!!

В общем в итоге ребята подсказали команду, но как до нее дошли - для меня так и осталось магией :)

4.6 компиляция, про опцию -fPIC всплывало на форумах что нужна, в путях укажем место откуда заберем результат после make install, собирать будем статически. так проще , поэтому опция no-shared

./Configure linux-generic32 no-shared no-dso --cross-compile-prefix=arm-linux-gnueabihf- --prefix=$PWD/_install --openssldir=$PWD/_install/ssl -fPIC

4.7 make install

5. смотрим что появилось в _install, ну и по скольку дальше нам требуется указать пути на эти две библиотеки - имеет смысл сделать на них ссылки, а в прочем можно и через переменную окружения найти

6. сборка OpenSSH

6.1
./configure --disable-strip --host=arm-linux-gnueabihf --prefix=$PWD/_install --with-zlib=$PWD/../zlib-1.3.1/_install --with-ssl-dir=$PWD/../openssl-3.3.2/_install - конфигурация openssh

6.2
make -j16
6.3
make install

6.4 проверяем результат что все под нужную архитектуру скомпилировалось
>file ssh

ssh: ELF 32-bit LSB pie executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, BuildID[sha1]=8714bedccbaff96e1638a2bf10736a3cef22f2b5, for GNU/Linux 3.2.0, with debug_info, not stripped

Замечаем, что ему все же нужны динамические библиотеки, хотя мы старались этого избежать

6.5 Проверим , может что еще надо
>readelf -d ssh 

Dynamic section at offset 0x29c63c contains 28 entries:
  Тег                Тип                  Имя/Знач
 0x00000001 (NEEDED)                     Совм. исп. библиотека: [libc.so.6]
 0x00000001 (NEEDED)                     Совм. исп. библиотека: [ld-linux-armhf.so.3]
 0x0000000c (INIT)                       0x27338
 0x0000000d (FINI)                       0x1e7ad8
 0x00000019 (INIT_ARRAY)                 0x26f9e8
 0x0000001b (INIT_ARRAYSZ)               4 (байт)
 0x0000001a (FINI_ARRAY)                 0x26f9ec
 0x0000001c (FINI_ARRAYSZ)               4 (байт)
 0x6ffffef5 (GNU_HASH)                   0x1b4
 0x00000005 (STRTAB)                     0x1450
 0x00000006 (SYMTAB)                     0x1e0
 0x0000000a (STRSZ)                      3185 (байт)
 0x0000000b (SYMENT)                     16 (байт)
 0x00000015 (DEBUG)                      0x0
 0x00000003 (PLTGOT)                     0x29d73c
 0x00000002 (PLTRELSZ)                   2112 (байт)
 0x00000014 (PLTREL)                     REL
 0x00000017 (JMPREL)                     0x26af8
 0x00000011 (REL)                        0x23e0
 0x00000012 (RELSZ)                      149272 (байт)
 0x00000013 (RELENT)                     8 (байт)
 0x0000001e (FLAGS)                      BIND_NOW
 0x6ffffffb (FLAGS_1)                    Флаги: NOW PIE
 0x6ffffffe (VERNEED)                    0x2310
 0x6fffffff (VERNEEDNUM)                 2
 0x6ffffff0 (VERSYM)                     0x20c2
 0x6ffffffa (RELCOUNT)                   18629
 0x00000000 (NULL)                       0x0

заметили
 0x00000001 (NEEDED)                     Совм. исп. библиотека: [libc.so.6]
 0x00000001 (NEEDED)                     Совм. исп. библиотека: [ld-linux-armhf.so.3]

Проверим так же, и остальные библиотеки: openssl и zlib
итого нам нужно только это
 0x00000001 (NEEDED)                     Совм. исп. библиотека: [libc.so.6]
 0x00000001 (NEEDED)                     Совм. исп. библиотека: [ld-linux-armhf.so.3]

7. Сборка корневой файловой системы
7.1  Сольем все скомпилированные библиотеки и файловую систему busybox c прошлой домашки в одну папку install
7.2 скопируем из нашей линуксовой сборки  (прошлая домашка) необходимые библиотеки 
root@wh-VirtualBox:/usr/arm-linux-gnueabihf/lib# 
в макет корневой файловой системы, директория lib
root@wh-VirtualBox:/usr/src/proshivka/ssh_arm/_install/lib# ls
cmake  engines-3  ld-linux-armhf.so.3  libcrypto.a  libc.so.6  libssl.a  libz.a  ossl-modules  pkgconfig

7.3  создадим архив файловой системы  
root@wh-VirtualBox:/usr/src/proshivka/ssh_arm/_install# find . | cpio -o -H newc | gzip > ssh.gz
cpio: Файл ./ssh.gz увеличился, 8650752 новых байта не скопированы
166369 блоков
7.4 перенесем его в прошивку где лежит ядро (из прошлой домашки)
root@wh-VirtualBox:/usr/src/proshivka/ssh_arm/_install# ls
bin  etc  include  lib  libexec  sbin  share  ssh.gz  ssl
root

8 запуск виртуалки

9 запуск ssh

9.1
/bin # ssh
Couldn't open /dev/null: No such file or directory


9.2 гуглим лечение
sudo mknod -m 666 /dev/null c 1 3
 
/bin # mknod -m 666 /dev/null c 1 3
/bin # ls
arch           echo           ln             ps             ssh-agent
ash            ed             login          pwd            ssh-keygen
base32         egrep          ls             reformime      ssh-keyscan
base64         false          lsattr         resume         stat
busybox        fatattr        lzop           rev            stty
c_rehash       fdflush        makemime       rm             su
cat            fgrep          mkdir          rmdir          sync
chattr         fsync          mknod          rpm            tar
chgrp          getopt         mktemp         run-parts      touch
chmod          grep           more           scp            true
chown          gunzip         mount          scriptreplay   umount
conspy         gzip           mountpoint     sed            uname
cp             hush           mpstat         setarch        usleep
cpio           ionice         mt             setpriv        vi
cttyhack       iostat         mv             setserial      watch
date           kbd_mode       nice           sftp           zcat
dd             kill           openssl        sh
df             link           pidof          sleep
dmesg          linux32        pipe_progress  ssh
dumpkmap       linux64        printenv       ssh-add
/bin # ssh
^C
^Z

[  136.708180] random: crng init done
No user exists for uid 0
/bin # 
/bin # 
/bin # echo "root:x:0:0:root:/root:/bin/sh" > /etc/passwd
/bin # echo "root:!:0:0:99999:7:::" > /etc/shadow
/bin # mkdir -p /root
/bin # whoami
root
/bin # ssh
usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address]
           [-c cipher_spec] [-D [bind_address:]port] [-E log_file]
           [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file]
           [-J destination] [-L address] [-l login_name] [-m mac_spec]
           [-O ctl_cmd] [-o option] [-P tag] [-p port] [-R address]
           [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]
           destination [command [argument ...]]
       ssh [-Q query_option]
/bin # 

/bin # key-gen
/bin/ash: key-gen: not found
/bin # ssh-keygen
Generating public/private ed25519 key pair.
Enter file in which to save the key (/root/.ssh/id_ed25519): mykey
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in mykey
Your public key has been saved in mykey.pub
The key fingerprint is:
SHA256:ujzsUshZGakbw0AfjddcKVLhHRGjjmPGdP2laGO9IaI root@(none)
The key's randomart image is:
+--[ED25519 256]--+
| .. .o =oo*+     |
|  ....*.++.o     |
|   o.o.++.o   .  |
|    =oo+   + o   |
|   . B* S * =    |
|    =o.+ + o o   |
|     oE     .    |
|    ..o.         |
|     o+.         |
+----[SHA256]-----+
/bin # 



